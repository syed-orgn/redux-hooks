# name: Release Drafter

# on:
#   push:
#     # branches to consider in the event; optional, defaults to all
#     branches:
#       - master
#   # pull_request event is required only for autolabeler
#   pull_request:
#     # Only following types are handled by the action, but one can default to all as well
#     types: [opened, reopened, synchronize]
#   # pull_request_target event is required for autolabeler to support PRs from forks
#   # pull_request_target:
#   #   types: [opened, reopened, synchronize]

# permissions:
#   contents: read

# jobs:
#   update_release_draft:
#     permissions:
#       # write permission is required to create a github release
#       contents: write
#       # write permission is required for autolabeler
#       # otherwise, read permission is required at least
#       pull-requests: write
#     runs-on: ubuntu-latest
#     steps:
#       # (Optional) GitHub Enterprise requires GHE_HOST variable set
#       #- name: Set GHE_HOST
#       #  run: |
#       #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV
#       # Drafts your next Release notes as Pull Requests are merged into "master"
#       - name: Check branch name
#         run: |
#           branch_name=${{ toJson(github.event.pull_request.head.ref) }}
#           echo "${{ toJson(github.event.pull_request) }} fasdfafasfasdfasdfasfasf1 $branch_name"
#           if [[ $branch_name =~ (major|minor|patch)[\/:\s].+ ]]; then
#             echo "Branch name contains 'major', 'minor', or 'patch' followed by a delimiter and some text. Proceeding with release draft update."
#           else
#             echo "Branch name does not match the required pattern. Skipping release draft update."
#             exit 1
#           fi
#       # Drafts your next Release notes as Pull Requests are merged into "master"
#       - uses: release-drafter/release-drafter@v5
#         # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
#         # with:
#         #   config-name: my-config.yml
#         #   disable-autolabeler: true
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Release Drafter Test

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read

jobs:
  get_labels:
    permissions: 
          contents: write 
          pull-requests: write      
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get labels
        id: get_labels
        run: |
          # Use GitHub's REST API to fetch labels for a specific issue or pull request
          LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels)
          echo "::set-output name=labels::$LABELS"
          echo "Labels: $LABELS"

      - name: Parse labels
        run: |
          # Parse labels from the JSON output
          LABELS="${{ steps.get_labels.outputs.labels }}"
          echo "Labels: $LABELS"

          # Use JavaScript to parse the labels
          node -e "const labels = JSON.parse(process.env.LABELS); console.log('Labels VIA JS:', labels);"
