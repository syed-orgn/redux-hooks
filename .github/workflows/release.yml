name: Release Notes

on:
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch Origin
        run: git fetch origin

      - name: List tags
        run: git tag

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Generate release notes
        id: release-notes
        run: |
          # Get the latest version tag
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))

          # Get the previous version tag
          previous_tag=$(git describe --tags --abbrev=0 $latest_tag^)

          # Generate release notes header
          release_notes="## Minor Changes\n"

          # Loop through minor changes commits
          minor_changes=$(git log --pretty=format:'- #%h %s (thanks %an)' --grep='feat:' $previous_tag..$latest_tag)
          if [[ ! -z "$minor_changes" ]]; then
            release_notes="$release_notes\n$minor_changes\n"
          fi

          # Generate release notes footer and patch changes section
          release_notes="$release_notes\n## Patch Changes\n"
          patch_changes=$(git log --pretty=format:'- #%h %s (thanks %an)' --grep='fix:' $previous_tag..$latest_tag)
          if [[ ! -z "$patch_changes" ]]; then
            release_notes="$release_notes\n$patch_changes\n"
          fi

          # Set the output variable for later steps
          echo "::set-output name=release_notes::$release_notes"

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --release-notes "${RELEASE_NOTES}"

# name: Release

# on:
#   workflow_dispatch:

# jobs:
#   release:
#     permissions:
#       contents: write
#       issues: write
#       pull-requests: write
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Fetch Origin
#         run: git fetch origin

#       - name: List tags
#         run: git tag

#       - name: Setup Node.js 20
#         uses: actions/setup-node@v3
#         with:
#           node-version: "20"

#       - name: Install dependencies
#         run: npm install

#       - name: Generate release notes
#         id: release-notes
#         run: |
#           # Get the latest version tag
#           latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))

#           # Get the previous version tag
#           previous_tag=$(git describe --tags --abbrev=0 $latest_tag^)

#           # Generate release notes between current and previous version
#           release_notes=$(git log --oneline --grep='feat:' --grep='fix:' $previous_tag..$latest_tag)

#           # Set the output variable for later steps
#           echo "::set-output name=release_notes::$release_notes"

#       - name: Run semantic-release
#         run: npx semantic-release
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           RELEASE_NOTES: ${{ steps.release-notes.outputs.release_notes }}

# WORKING
# name: Release

# on:
#   push:
#     branches: [master]

# jobs:
#   release:
#     permissions:
#       contents: write
#       issues: write
#       pull-requests: write
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3

#       # Install Node verions 20
#       - name: Set up Node.js 20
#         uses: actions/setup-node@v3
#         with:
#           node-version: "20"

#       # Install dependencies
#       - name: Install dependencies
#         run: npm install

#       # Run semantic-release
#       - name: Run semantic-release
#         run: npx semantic-release
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
