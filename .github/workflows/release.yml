name: Release

on:
  push:
    branches: [ master ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      packages: write
    steps:
      - uses: actions/checkout@v3

      # Run Release Drafter to generate release notes
      - name: Generate release notes
        uses: release-drafter/release-drafter@v5

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      # Analyze commits and generate release type (major, minor, patch)
      - name: Analyze commits
        run: npx @semantic-release/commit-analyzer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Replace with your token secret

      # Generate release notes based on commits and Release Drafter output
      # - name: Generate release notes
      #   run: npx @semantic-release/release-notes-generator
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Replace with your token secret

      # Generate and publish the release
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Replace with your token secret
        run: npx semantic-release





# name: Release Notes

# on:
#   workflow_dispatch:

# jobs:
#   release:
#     permissions:
#       contents: write
#       issues: write
#       pull-requests: write
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Fetch Origin
#         run: git fetch origin

#       - name: List tags
#         run: git tag

#       - name: Setup Node.js 20
#         uses: actions/setup-node@v3
#         with:
#           node-version: "20"

#       - name: Install dependencies
#         run: npm install

#       - name: Generate release notes
#         id: release-notes
#         run: |
#           # Get the latest version tag
#           latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))

#           # Get the previous version tag
#           previous_tag=$(git describe --tags --abbrev=0 $latest_tag^)

#           # Generate release notes between current and previous version
#           release_notes=$(git log --oneline --grep='feat:' --grep='fix:' $previous_tag..$latest_tag)

#           # Set the output variable for later steps
#           echo "::set-output name=release_notes::$release_notes"

#       - name: Run semantic-release
#         run: npx semantic-release
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           RELEASE_NOTES: ${{ steps.release-notes.outputs.release_notes }}
# WORKING
# name: Release

# on:
#   push:
#     branches: [master]

# jobs:
#   release:
#     permissions:
#       contents: write
#       issues: write
#       pull-requests: write
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3

#       # Install Node verions 20
#       - name: Set up Node.js 20
#         uses: actions/setup-node@v3
#         with:
#           node-version: "20"

#       # Install dependencies
#       - name: Install dependencies
#         run: npm install

#       # Run semantic-release
#       - name: Run semantic-release
#         run: npx semantic-release
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
